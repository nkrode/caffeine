diff a/caffeine/src/main/java/com/github/benmanes/caffeine/cache/LocalAsyncLoadingCache.java b/caffeine/src/main/java/com/github/benmanes/caffeine/cache/LocalAsyncLoadingCache.java	(rejected hunks)
@@ -131,7 +131,7 @@ abstract class LocalAsyncLoadingCache<C extends LocalCache<K, CompletableFuture<
     }, recordStats, /* recordLoad */ false);
     if (result[0] != null) {
       AtomicBoolean completed = new AtomicBoolean();
-      result[0].whenComplete((value, error) -> {
+      result[0].whenCompleteAsync((value, error) -> {
         if (!completed.compareAndSet(false, true)) {
           // Ignore multiple invocations due to ForkJoinPool retrying on delays
           return;
@@ -193,7 +193,7 @@ abstract class LocalAsyncLoadingCache<C extends LocalCache<K, CompletableFuture<
     }
 
     loader.asyncLoadAll(proxies.keySet(), cache.executor())
-        .whenComplete(new AsyncBulkCompleter(proxies));
+        .whenCompleteAsync(new AsyncBulkCompleter(proxies));
     return composeResult(futures);
   }
 
@@ -231,7 +231,7 @@ abstract class LocalAsyncLoadingCache<C extends LocalCache<K, CompletableFuture<
     AtomicBoolean completed = new AtomicBoolean();
     long startTime = cache.statsTicker().read();
     cache.put(key, valueFuture);
-    valueFuture.whenComplete((value, error) -> {
+    valueFuture.whenCompleteAsync((value, error) -> {
       if (!completed.compareAndSet(false, true)) {
         // Ignore multiple invocations due to ForkJoinPool retrying on delays
         return;
@@ -467,7 +467,7 @@ abstract class LocalAsyncLoadingCache<C extends LocalCache<K, CompletableFuture<
         CompletableFuture<V> refreshFuture = (oldValue == null)
             ? loader.asyncLoad(key, cache.executor())
             : loader.asyncReload(key, oldValue, cache.executor());
-        refreshFuture.whenComplete((newValue, error) -> {
+        refreshFuture.whenCompleteAsync((newValue, error) -> {
           long loadTime = cache.statsTicker().read() - now;
           if (error != null) {
             cache.statsCounter().recordLoadFailure(loadTime);
